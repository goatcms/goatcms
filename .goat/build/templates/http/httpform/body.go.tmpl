{{- define "httpform.body" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".name")) -}}
{{- $formName := (camelcaseuf $name) -}}
{{- $typeName := (print $formName "FindAll") -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $fields := (keys .Data $fieldsBaseKey) -}}
package {{lower $name}}

import (
	"net/http"

	forms "{{index $ctx.Properties.Build "forms_path"}}"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/http/httphelpers"
)

// NewForm create new form instance with data from HTTP request
func NewForm(scope app.Scope, fields []string) (entity *forms.{{$formName}}, err error) {
	var deps struct {
		Req *http.Request `request:"Request"`
	}
	if scope.InjectTo(&deps); err != nil {
		return nil, err
	}
	entity = &forms.{{$formName}}{}
	if err = DecodeFields("", entity, deps.Req, fields); err != nil {
		return nil, err
	}
	return entity, nil
}

// DecodeFields decode HTTP request and set result do form
func DecodeFields(prefix string, form *forms.{{$formName}}, req *http.Request, fields []string) (err error) {
	if err = httphelpers.ParseForm(req); err != nil {
		return err
	}
	for _, fieldName := range fields {
		switch(fieldName) {
			{{- range $index, $field := $fields -}}
		    {{- $key := (print $fieldsBaseKey $field) -}}
		    {{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
		    {{- $fieldType := (lower (index $ctx.Data (print $key ".type"))) }}
			case "{{$fieldName}}":
				{{- if eq $fieldType "repassword" -}}
					plain{{$fieldName}}First, ok := req.Form[prefix + "{{$fieldName}}.First"]
					if !ok {
						continue
					}
					plain{{$fieldName}}Second, ok := req.Form[prefix + "{{$fieldName}}.Second"]
					if !ok {
						continue
					}
					form.{{$fieldName}} = &forms.RepeatPassword{
						First: plain{{$fieldName}}First[0],
						Second: plain{{$fieldName}}Second[0],
					}
				{{- else -}}
					plain{{$fieldName}}, ok := req.Form[prefix + "{{$fieldName}}"]
					if !ok {
						continue
					}
					form.{{$fieldName}} = &plain{{$fieldName}}[0]
				{{- end -}}
		  {{- end }}
		}
	}
	return nil
}

{{- end -}}
