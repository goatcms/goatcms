{{- define "httpform.body" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".name")) -}}
{{- $formName := (camelcaseuf $name) -}}
{{- $typeName := (print $formName "FindAll") -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $fields := (keys .Data $fieldsBaseKey) -}}
{{- $firstIntValue := (findRow (print .From ".fields.") "^[A-Za-z0-9]+$" ".type" "int" $ctx.Data) -}}
{{- $firstDatetimeValue := (findRow (print .From ".fields.") "^[A-Za-z0-9]+$" ".type" "datetime" $ctx.Data) -}}


package {{lower $name}}

import (
	"net/http"
	"strings"
	"io/ioutil"
	{{- if ne $firstIntValue ""}}
	"strconv"
	{{- end }}
	{{- if ne $firstDatetimeValue ""}}
	"time"
	{{- end }}

	forms "{{index $ctx.Properties.Build "forms_path"}}"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/http/httphelpers"
)

// NewForm create new form instance with data from HTTP request
func NewForm(scope app.Scope, fields *forms.{{camelcaseuf $name}}Fields) (form *forms.{{$formName}}, err error) {
	var (
		deps struct {
			Req *http.Request `request:"Request"`
		}
		contentType string
		body        []byte
	)
	if scope.InjectTo(&deps); err != nil {
		return nil, err
	}
	form = &forms.{{$formName}}{}
	contentType = deps.Req.Header.Get("Content-type")
	if strings.HasPrefix(contentType, "application/json") {
		if body, err = ioutil.ReadAll(deps.Req.Body); err != nil {
			return nil, err
		}
		if err = forms.{{$formName}}FromJSON(form, body, fields); err != nil {
			return nil, err
		}
		return form, nil
	}
	if err = DecodeForm("", form, deps.Req, fields); err != nil {
		return nil, err
	}
	return form, nil
}

// DecodeForm decode HTTP request and set result do form
func DecodeForm(prefix string, form *forms.{{$formName}}, req *http.Request, fields *forms.{{camelcaseuf $name}}Fields) (err error) {
	if err = httphelpers.ParseForm(req); err != nil {
		return err
	}
	{{- range $index, $field := $fields -}}
    {{- $key := (print $fieldsBaseKey $field) -}}
    {{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
    {{- $fieldType := (lower (index $ctx.Data (print $key ".type"))) }}
	if fields.{{$fieldName}} {
		{{- if eq $fieldType "repassword" }}
			plain{{$fieldName}}First, ok1 := req.Form[prefix + "{{$fieldName}}.First"]
			plain{{$fieldName}}Second, ok2 := req.Form[prefix + "{{$fieldName}}.Second"]
			if ok1 && ok2 {
				form.{{$fieldName}} = &forms.RepeatPassword{
					First: plain{{$fieldName}}First[0],
					Second: plain{{$fieldName}}Second[0],
				}
			}
		{{- else if eq $fieldType "text" "string" "email" "password" "lang" }}
			plain{{$fieldName}}, ok := req.Form[prefix + "{{$fieldName}}"]
			if ok {
				form.{{$fieldName}} = &plain{{$fieldName}}[0]
			}
		{{- else if eq $fieldType "datetime" }}
			plain{{$fieldName}}, ok := req.Form[prefix + "{{$fieldName}}"]
			if ok {
				var datetime time.Time
				if datetime, err = time.Parse(time.RFC3339, string(plain{{$fieldName}}[0])); err != nil {
					return err
				}
				form.{{$fieldName}} = &datetime
			}
		{{- else if eq $fieldType "int" }}
			plain{{$fieldName}}, ok := req.Form[prefix + "{{$fieldName}}"]
			if ok {
				var number int64
				if number, err = strconv.ParseInt(string(plain{{$fieldName}}[0]), 10, 64); err != nil {
					return err
				}
				form.{{$fieldName}} = &number
			}
		{{- end -}}
	}
  {{- end }}
	return nil
}

{{- end -}}
