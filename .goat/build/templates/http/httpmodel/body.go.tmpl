{{- define "httpmodel.body" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $typeName := (print $entityName "FindAll") -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $fields := (keys .Data $fieldsBaseKey) -}}
{{- $firstIntValue := (findRow (print .From ".fields.") "^[A-Za-z0-9]+$" ".type" "int" $ctx.Data) -}}

package {{lower $name}}

import (
	"net/http"
	"strings"
	"fmt"
	"io/ioutil"
	{{- if ne $firstIntValue ""}}
	"strconv"
	{{- end }}

	entities "{{index $ctx.Properties.Build "entities_path"}}"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/http/httphelpers"
	"github.com/goatcms/goatcore/varutil"
	"github.com/buger/jsonparser"
)

// NewForm create new entity instance with data from HTTP request
func NewForm(scope app.Scope, fields []string) (entity *entities.{{$entityName}}, err error) {
	var (
		deps struct {
			Req *http.Request `request:"Request"`
		}
		contentType string
		body        []byte
	)
	if scope.InjectTo(&deps); err != nil {
		return nil, err
	}
	entity = &entities.{{$entityName}}{}
	contentType = deps.Req.Header.Get("Content-type")
	if strings.HasPrefix(contentType, "application/json") {
		if body, err = ioutil.ReadAll(deps.Req.Body); err != nil {
			return nil, err
		}
		if err = DecodeJSON("", entity, body, fields); err != nil {
			return nil, err
		}
		return entity, nil
	}
	if err = DecodeForm("", entity, deps.Req, fields); err != nil {
		return nil, err
	}
	return entity, nil
}

// DecodeForm decode HTTP request and set result do entity
func DecodeForm(prefix string, e *entities.{{$entityName}}, req *http.Request, fields []string) (err error) {
	if err = httphelpers.ParseForm(req); err != nil {
		return err
	}
	for _, fieldName := range fields {
		switch(fieldName) {
			{{- range $index, $field := $fields -}}
		    {{- $key := (print $fieldsBaseKey $field) -}}
		    {{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
		    {{- $fieldType := (lower (index $ctx.Data (print $key ".type"))) }}

				{{- if eq $fieldType "text" "string" "email" "password" "lang" }}
				case "{{$fieldName}}":
					plain{{$fieldName}}, ok := req.Form[prefix + "{{$fieldName}}"]
					if !ok {
						continue
					}
					e.{{$fieldName}} = &plain{{$fieldName}}[0]
				{{- else if eq $fieldType "int" }}
				case "{{$fieldName}}":
					var number int64
					plain{{$fieldName}}, ok := req.Form[prefix + "{{$fieldName}}"]
					if !ok {
						continue
					}
					if number, err = strconv.ParseInt(plain{{$fieldName}}[0], 10, 64); err != nil {
						return err
					}
					e.{{$fieldName}} = &number
				{{- else -}}
				  {{- error (print "bad type" .) -}}
				{{- end -}}
		  {{- end }}
		}
	}
	return nil
}

// DecodeJSON decode HTTP JSON request and set result do entity
func DecodeJSON(prefix string, e *entities.{{$entityName}}, json []byte, fields []string) (err error) {
	return jsonparser.ObjectEach(json, func(key []byte, value []byte, dataType jsonparser.ValueType, offset int) error {
		switch strings.ToLower(string(key)) {
			{{- range $index, $field := $fields -}}
		    {{- $key := (print $fieldsBaseKey $field) -}}
		    {{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
		    {{- $fieldType := (lower (index $ctx.Data (print $key ".type"))) }}

				{{- if eq $fieldType "text" "string" "email" "password" "lang" }}
				case "{{lower $fieldName}}":
					var str string
					if !varutil.IsArrContainStr(fields, "{{$fieldName}}") {
						return fmt.Errorf("{{$entityName}}.DecodeJSON haven't got {{$fieldName}} permissions")
					}
					if dataType != jsonparser.String {
						return fmt.Errorf("{{$entityName}}.DecodeJSON expected string and take %s", value)
					}
					str = string(value)
					e.{{$fieldName}} = &str

				{{- else if eq $fieldType "int" }}
				case "{{lower $fieldName}}":
					var number int64
					if !varutil.IsArrContainStr(fields, "{{$fieldName}}") {
						return fmt.Errorf("{{$entityName}}.DecodeJSON haven't got {{$fieldName}} permissions")
					}
					if number, err = strconv.ParseInt(string(value), 10, 64); err != nil {
						return err
					}
					e.{{$fieldName}} = &number
				{{- else -}}
				  {{- error (print "bad type" .) -}}
				{{- end -}}
		  {{- end }}

		default:
			return fmt.Errorf("{{$entityName}}.DecodeJSON: Unknow key %s (value: %s)", key, value)
		}
		return nil
	})
}

{{- end -}}
