{{- define "httpmodel.body" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $typeName := (print $entityName "FindAll") -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $fields := (keys .Data $fieldsBaseKey) -}}
{{- $firstIntValue := (findRow (print .From ".fields.") "^[A-Za-z0-9]+$" ".type" "int" $ctx.Data) -}}

package {{lower $name}}

import (
	"net/http"
	"strings"
	"fmt"
	"io/ioutil"
	{{- if ne $firstIntValue ""}}
	"strconv"
	{{- end }}

	entities "{{index $ctx.Properties.Build "entities_path"}}"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/http/httphelpers"
	//"github.com/buger/jsonparser"
)

// NewForm create new entity instance with data from HTTP request
func NewForm(scope app.Scope, fields *entities.{{camelcaseuf $name}}Fields) (entity *entities.{{$entityName}}, err error) {
	var (
		deps struct {
			Req *http.Request `request:"Request"`
		}
		contentType string
		body        []byte
	)
	if scope.InjectTo(&deps); err != nil {
		return nil, err
	}
	entity = &entities.{{$entityName}}{}
	contentType = deps.Req.Header.Get("Content-type")
	if strings.HasPrefix(contentType, "application/json") {
		if body, err = ioutil.ReadAll(deps.Req.Body); err != nil {
			return nil, err
		}
		if err = entities.{{$entityName}}FromJSON(entity, body, fields); err != nil {
			return nil, err
		}
		return entity, nil
	}
	if err = DecodeForm("", entity, deps.Req, fields); err != nil {
		return nil, err
	}
	return entity, nil
}

// DecodeForm decode HTTP request and set result do entity
func DecodeForm(prefix string, e *entities.{{$entityName}}, req *http.Request, fields *entities.{{camelcaseuf $name}}Fields) (err error) {
	if err = httphelpers.ParseForm(req); err != nil {
		return err
	}
	{{- range $index, $field := $fields -}}
    {{- $key := (print $fieldsBaseKey $field) -}}
    {{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
    {{- $fieldType := (lower (index $ctx.Data (print $key ".type"))) }}

		{{- if eq $fieldType "text" "string" "email" "password" "lang" }}
		if fields.{{$fieldName}} {
			plain{{$fieldName}}, ok := req.Form[prefix + "{{$fieldName}}"]
			if ok {
				e.{{$fieldName}} = &plain{{$fieldName}}[0]
			}
		}
		{{- else if eq $fieldType "int" }}
		if fields.{{$fieldName}} {
			var number int64
			plain{{$fieldName}}, ok := req.Form[prefix + "{{$fieldName}}"]
			if ok {
				if number, err = strconv.ParseInt(plain{{$fieldName}}[0], 10, 64); err != nil {
					return err
				}
				e.{{$fieldName}} = &number
			}
		}
		{{- else -}}
		  {{- error (print "bad type" .) -}}
		{{- end -}}
  {{- end }}
	return nil
}

// DecodeJSON decode HTTP JSON request and set result do entity
/*func DecodeJSON(e *entities.{{$entityName}}, json []byte, fields *entities.{{camelcaseuf $name}}Fields) (err error) {
	return entities.{{$entityName}}FromJSON(e, json, fields)
}*/

{{- end -}}
