{{define "module.commands_go" -}}
{{- $ctx := . -}}

package {{index $ctx.Properties.Build "package"}}

import (
	"github.com/goatcms/goatcms/cmsapp/commands"
	"github.com/goatcms/goatcms/cmsapp/commands/daomodc"
	"github.com/goatcms/goatcms/cmsapp/commands/dbc"
	"github.com/goatcms/goatcms/cmsapp/commands/servec"
	"github.com/goatcms/goatcms/cmsapp/commands/userc"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/varutil/goaterr"
)

// RegisterCommands add cmsapp commands to an application
func RegisterCommands(a app.App) error {
	return goaterr.ToErrors(goaterr.AppendError(nil,
		app.RegisterComand(a, "run", servec.Run, commands.RunHelp),
		app.RegisterComand(a, "db:build", dbc.RunBuild, commands.DBBuildHelp),
		app.RegisterComand(a, "db:export", dbc.RunExport, commands.DBExportHelp),
		app.RegisterComand(a, "db:load", dbc.RunLoad, commands.DBLoadHelp),
		app.RegisterComand(a, "db:exec", dbc.RunExec, commands.DBExecHelp),
		app.RegisterComand(a, "db:query", dbc.RunQuery, commands.DBQueryHelp),
		app.RegisterComand(a, "db:fixtures:load", dbc.RunFixturesLoad, commands.DBFixturesHelp),
		app.RegisterComand(a, "user:roles:update", userc.RunUpdateRoles, commands.UserUpdateRolesHelp),
		app.RegisterComand(a, "user:password:update", userc.RunUpdatePassword, commands.UserUpdatePasswordHelp),
		app.RegisterComand(a, "user:connected:add", userc.RunConnectAdd, commands.UserConnectAddHelp),
		app.RegisterComand(a, "user:add", userc.RunAdd, commands.UserAddHelp),
		app.RegisterComand(a, "user:exists", userc.RunUserExists, commands.UserExistsHelp),
		app.RegisterComand(a, "user:exists", userc.RunUserExists, commands.UserExistsHelp),
		app.RegisterArgument(a, "env", commands.EnvArg),
		app.RegisterArgument(a, "loglvl", commands.LoglvlArg),
		app.RegisterArgument(a, "host", commands.HostArg),
		daomodc.RegisterCommands(a),
	))
}

{{- end -}}
