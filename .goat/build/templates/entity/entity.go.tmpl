{{define "entity" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $fields := (keys .Data $fieldsBaseKey) -}}
{{- $systemFields := (findRows $fieldsBaseKey "^[A-Za-z0-9]+$" ".system" "y" $ctx.Data) -}}
{{- $mainFields := (except $fields $systemFields) -}}
{{- $relationsBaseKey := (print .From ".relations.") -}}
{{- $relations := (keys .Data $relationsBaseKey) -}}
{{- $systemRelations := (findRows $relationsBaseKey "^[A-Za-z0-9]+$" ".system" "y" $ctx.Data) -}}
{{- $mainRelations := (except $relations $systemRelations) -}}
{{- $firstDatetimeValue := (findRow (print .From ".fields.") "^[A-Za-z0-9]+$" ".type" "datetime" $ctx.Data) -}}

package {{index $ctx.Properties.Build "package"}}

{{- if ne $firstDatetimeValue ""}}
import (
  "time"
)
{{- end }}

// {{camelcaseuf $name}}AllFields is a array contains list of all {{camelcaseuf $name}} fields (except ID)
var {{camelcaseuf $name}}AllFields = {{template "fields_array_helper" (dict "WithID" false "EntityName" $name "AllFields" $fields "AllRelations" $relations "Fields" $fields "Relations" $relations "Context" $ctx)}}

// {{camelcaseuf $name}}AllFieldsAndID is a array contains list of all {{camelcaseuf $name}} fields (with ID)
var {{camelcaseuf $name}}AllFieldsAndID = {{template "fields_array_helper" (dict "WithID" true "EntityName" $name "AllFields" $fields "AllRelations" $relations "Fields" $fields "Relations" $relations "Context" $ctx)}}

// {{camelcaseuf $name}}MainFields is a array contains list of main {{camelcaseuf $name}} fields (except ID)
var {{camelcaseuf $name}}MainFields = {{template "fields_array_helper" (dict "WithID" false "EntityName" $name "AllFields" $fields "AllRelations" $relations "Fields" $mainFields "Relations" $mainRelations "Context" $ctx)}}

// {{camelcaseuf $name}}MainFieldsAndID is a array contains list of main {{camelcaseuf $name}} fields (with ID)
var {{camelcaseuf $name}}MainFieldsAndID = {{template "fields_array_helper" (dict "WithID" true "EntityName" $name "AllFields" $fields "AllRelations" $relations "Fields" $mainFields "Relations" $mainRelations "Context" $ctx)}}

// {{camelcaseuf $name}}SystemFields is a array contains list of system {{camelcaseuf $name}} fields (except ID)
var {{camelcaseuf $name}}SystemFields = {{template "fields_array_helper" (dict "WithID" false "EntityName" $name "AllFields" $fields "AllRelations" $relations "Fields" $systemFields "Relations" $systemRelations "Context" $ctx)}}

// {{camelcaseuf $name}}SystemFieldsAndID is a array contains list of system {{camelcaseuf $name}} fields (with ID)
var {{camelcaseuf $name}}SystemFieldsAndID = {{template "fields_array_helper" (dict "WithID" true "EntityName" $name "AllFields" $fields "AllRelations" $relations "Fields" $systemFields "Relations" $systemRelations "Context" $ctx)}}

// {{camelcaseuf $name}} select {{lower $name}} entity fields
type {{camelcaseuf $name}}Fields struct {
  ID bool
{{- range $index, $field := $fields -}}
  {{- $key := (print $fieldsBaseKey $field) -}}
  {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
  {{- $fieldType := (index $ctx.Data (print $key ".type")) }}
  {{camelcaseuf $fieldName}} bool
{{- end -}}
{{- range $index, $relation := $relations -}}
  {{- $key := (print $relationsBaseKey $relation) -}}
  {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
  {{- $foreignModel := (camelcaseuf (index $ctx.Data (print $key ".model"))) }}
  {{camelcaseuf $fieldName}}ID bool
{{- end }}
}

// {{camelcaseuf $name}} storages {{lower $name}} data
type {{camelcaseuf $name}} struct {
  ID *int64 `json:"id"`
{{- range $index, $field := $fields -}}
  {{- $key := (print $fieldsBaseKey $field) -}}
  {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
  {{- $fieldType := (index $ctx.Data (print $key ".type")) }}
  {{camelcaseuf $fieldName}} *{{template "gotype" $fieldType}} `json:"{{camelcaself $fieldName}}" db:"{{camelcaseuf $fieldName}}"`
{{- end -}}
{{- range $index, $relation := $relations -}}
  {{- $key := (print $relationsBaseKey $relation) -}}
  {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
  {{- $foreignModel := (camelcaseuf (index $ctx.Data (print $key ".model"))) }}
  {{camelcaseuf $fieldName}}ID *{{template "gotype" "int"}}
  {{camelcaseuf $fieldName}} *{{$foreignModel}}
{{- end }}
}

{{- end -}}
