{{define "entity_json" -}}
{{- $ctx := . -}}
{{- $entityName := (camelcaseuf (index $ctx.Data (print .From ".entity"))) -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $fields := (keys .Data $fieldsBaseKey) -}}
{{- $relationsBaseKey := (print .From ".relations.") -}}
{{- $relations := (keys .Data $relationsBaseKey) -}}
{{- $firstIntValue := (findRow (print .From ".fields.") "^[A-Za-z0-9]+$" ".type" "int" $ctx.Data) -}}

package {{index $ctx.Properties.Build "package"}}

import (
	"strings"
	"strconv"
	"fmt"
	{{- if ne $firstIntValue ""}}
	"strconv"
	{{- end }}
	"github.com/goatcms/goatcore/varutil"
	"github.com/buger/jsonparser"
)


// {{$entityName}}FromJSON decode JSON data to entity
func {{$entityName}}FromJSON(e *{{$entityName}}, json []byte, fields *{{camelcaseuf $entityName}}Fields) (err error) {
	return jsonparser.ObjectEach(json, func(key []byte, value []byte, dataType jsonparser.ValueType, offset int) error {
		switch strings.ToLower(string(key)) {
			case "id":
					var number int64
					if !fields.ID {
						return fmt.Errorf("{{$entityName}}.DecodeJSON haven't got ID permissions")
					}
					if number, err = strconv.ParseInt(string(value), 10, 64); err != nil {
						return err
					}
					e.ID = &number
{{- range $index, $field := $fields -}}
{{- $key := (print $fieldsBaseKey $field) -}}
{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
{{- $fieldType := (lower (index $ctx.Data (print $key ".type"))) }}

{{- if eq $fieldType "text" "string" "email" "password" "lang" }}
				case "{{lower $fieldName}}":
					var str string
					if !fields.{{$fieldName}} {
						return fmt.Errorf("{{$entityName}}.DecodeJSON haven't got {{$fieldName}} permissions")
					}
					if dataType != jsonparser.String {
						return fmt.Errorf("{{$entityName}}.DecodeJSON expected string and take %s", value)
					}
					str = string(value)
					e.{{$fieldName}} = &str

{{- else if eq $fieldType "int" }}
				case "{{lower $fieldName}}":
					var number int64
					if !fields.{{$fieldName}} {
						return fmt.Errorf("{{$entityName}}.DecodeJSON haven't got {{$fieldName}} permissions")
					}
					if number, err = strconv.ParseInt(string(value), 10, 64); err != nil {
						return err
					}
					e.{{$fieldName}} = &number
{{- else -}}
	{{- error (print "bad type" .) -}}
{{- end -}}

{{- end -}}
{{- range $index, $relationID := $relations -}}
{{- $key := (print $relationsBaseKey $relationID ".") -}}
{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key "name"))) -}}
{{- $relatedModel := (lower (index $ctx.Data (print $key "model"))) }}
				case "{{lower $fieldName}}id":
					var number int64
					if !fields.{{$fieldName}}ID {
						return fmt.Errorf("{{$entityName}}.DecodeJSON haven't got {{$fieldName}} permissions")
					}
					if number, err = strconv.ParseInt(string(value), 10, 64); err != nil {
						return err
					}
					e.{{$fieldName}}ID = &number
{{- end }}
		default:
			return fmt.Errorf("{{$entityName}}FromJSON: Unknow key %s (value: %s)", key, value)
		}
		return nil
	})
}

func New{{$entityName}}FromJSON(json []byte, fields *{{camelcaseuf $entityName}}Fields) (entity *{{camelcaseuf $entityName}}, err error) {
	entity = &{{camelcaseuf $entityName}}{}
	return  entity, {{$entityName}}FromJSON(entity, json, fields)
}

func New{{$entityName}}sFromJSON(json []byte, fields *{{camelcaseuf $entityName}}Fields) (entities []*{{$entityName}}, de error) {
	var (
		err2 error
		entity *{{$entityName}}
	)
	entities = []*{{$entityName}}{}
	if _, err := jsonparser.ArrayEach(json, func(value []byte, dataType jsonparser.ValueType, offset int, err error) {
		if err != nil || de != nil {
			return
		}
		if dataType != jsonparser.Object {
			de = fmt.Errorf("NewBuild array  must contains replace objects only")
			return
		}
		if entity, err2 = New{{$entityName}}FromJSON(value, fields); err2 != nil {
			de = err2
			return
		}
		entities = append(entities, entity)
	}); err != nil {
		return nil, err
	}
	if de != nil {
		return nil, de
	}
	return entities, err2
}

// {{$entityName}}ToJSON convert entity to JSON
func {{$entityName}}ToJSON(e *{{$entityName}}, fields *{{camelcaseuf $entityName}}Fields) (json string, err error) {
	rows := make([]string, {{sum (len $fields) (len $relations) 1}})
	i := 0
	if fields.ID {
		rows[i] = "\"id\":" + varutil.FormatInt(e.ID, 10)
		i++
	}
{{- range $index, $field := $fields -}}
{{- $key := (print $fieldsBaseKey $field) -}}
{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
{{- $fieldType := (lower (index $ctx.Data (print $key ".type"))) }}

{{- if eq $fieldType "text" "string" "email" "password" "lang" "repassword" }}
				if fields.{{camelcaseuf $fieldName}} {
					rows[i] = "\"{{lower $fieldName}}\":" + varutil.Quote(e.{{$fieldName}})
					i++
				}
{{- else if eq $fieldType "int" }}
				if fields.{{camelcaseuf $fieldName}} {
					rows[i] = "\"{{lower $fieldName}}\":" + varutil.FormatInt(e.{{$fieldName}}, 10)
					i++
				}
{{- else -}}
	{{- error (print "bad type" .) -}}
{{- end -}}

{{- end -}}
{{- range $index, $relationID := $relations -}}
{{- $key := (print $relationsBaseKey $relationID ".") -}}
{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key "name"))) -}}
{{- $relatedModel := (lower (index $ctx.Data (print $key "model"))) }}
				if fields.{{$fieldName}}ID {
					rows[i] = "\"{{lower $fieldName}}id\":" + varutil.FormatInt(e.{{$fieldName}}ID, 10)
					i++
				}
{{- end }}
	return "{" + strings.Join(rows[0:i], ",") + "}", nil
}

// {{$entityName}}sToJSON convert entities to JSON
func {{$entityName}}sToJSON(e []*{{$entityName}}, fields *{{camelcaseuf $entityName}}Fields) (json string, err error) {
	rows := make([]string, len(e))
	for i, entity := range e {
		if rows[i], err = {{$entityName}}ToJSON(entity, fields); err != nil {
			return "", err
		}
	}
	return "[" + strings.Join(rows, ",") + "]", nil
}

{{- end -}}
