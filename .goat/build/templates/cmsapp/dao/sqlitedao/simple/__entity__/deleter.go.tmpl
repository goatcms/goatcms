{{define "dao/sqlitedao/simple/{{entity}}/deleter.go" -}}
{{- $ctx := . -}}
{{- $entity := $ctx.DotData -}}
{{- $typeName := print $entity.Name.CamelCaseUF "Delete" -}}

package simple

import (
	"fmt"
	"strconv"
	"database/sql"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/dependency"
	"github.com/goatcms/goatcms/cmsapp/dao"
	"github.com/goatcms/goatcms/cmsapp/dao/sqlitedao/helpers"
)

// {{$typeName}} is a Data Access Object for {{lower $name}} entity
type {{$typeName}} struct {
  deps struct{
    DB          *sql.DB   `dependency:"db0.engine"`
		EngineScope app.Scope `dependency:"EngineScope"`
  }
}

func New{{$typeName}}(di dependency.Injector) (*{{$typeName}}, error) {
  instance := &{{$typeName}}{}
  if err := di.InjectTo(&instance.deps); err != nil {
    return nil, err
  }
  return instance, nil
}

func {{$typeName}}Factory(dp dependency.Provider) (interface{}, error) {
	instance, err := New{{$typeName}}(dp)
	if err != nil {
		return nil, err
	}
	return maindef.Delete(instance), nil
}

func (deleter {{$typeName}}) Delete(scope app.Scope, id int64) error {
	var (
		res   sql.Result
		err   error
		count int64
		tx *sql.Tx
	)
	if tx, err = helpers.TX(scope, deleter.deps.DB); err != nil {
		return err
	}
	sql := deleter.SQL(id)
	if res, err = tx.Exec(sql); err != nil {
		return fmt.Errorf("%s: %s", err.Error(), sql)
	}
	if count, err = res.RowsAffected(); err != nil {
		return fmt.Errorf("%s: %s", err.Error(), sql)
	}
	if count != 1 {
		return fmt.Errorf("Delete more than one record (%v records deleted)", count)
	}
	scope.On(app.AfterCommitEvent, func(interface{}) (err error) {
		return deleter.deps.EngineScope.Trigger(maindef.{{$typeName}}Event, nil)
	})
	return nil
}

func (deleter {{$typeName}}) SQL(id int64) string {
	return "DELETE FROM {{$entity.Plural.Underscore}} WHERE ID=" + strconv.FormatInt(id, 10)
}

{{- end -}}
