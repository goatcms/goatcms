{{define "dao/sqlitedao/simple/{{entity}}/findby{{index}}.go" -}}
{{- $ctx := . -}}
{{- $entity := $ctx.DotData.Entity -}}
{{- $index := $ctx.DotData.Index -}}
{{- $typeName := print $entity.Name.CamelCaseUF "FindBy" $index.Name.CamelCaseUF -}}

package simple

import (
	"strconv"
	"strings"
	"github.com/goatcms/goatcore/app"
	"database/sql"
	"github.com/goatcms/goatcore/dependency"
	"github.com/goatcms/goatcms/cmsapp/dao"
	"github.com/goatcms/goatcms/cmsapp/dao/sqlitedao/helpers"
	"github.com/goatcms/goatcms/cmsapp/entities"
)

// {{$typeName}} is a Data Access Object for {{lower $name}} entity
type {{$typeName}} struct {
  deps struct{
    DB *sql.DB `dependency:"db0.engine"`
  }
}

// New{{$typeName}} create new {{$typeName}} instance
func New{{$typeName}}(di dependency.Injector) (*{{$typeName}}, error) {
  instance := &{{$typeName}}{}
  if err := di.InjectTo(&instance.deps); err != nil {
    return nil, err
  }
  return instance, nil
}

// {{$typeName}}Factory create new {{$typeName}} instance
func {{$typeName}}Factory(dp dependency.Provider) (instance interface{}, err error) {
	if instance, err = New{{$typeName}}(dp); err != nil {
		return nil, err
	}
	return dao.{{$typeName}}(instance), nil
}

func (finder {{$typeName}}) Find(scope app.Scope, fields *entities.{{camelcaseuf $name}}Fields{{range $i, $field := $index.Fields -}}
	, {{$field.Name.CamelCaseLF}} {{template "gotype" $field.Type}}
{{- end -}}) (*entities.{{$entity.Name.CamelCaseUF}}, error) {
	var (
		err   error
		query string
		tx    *sql.Tx
		row   *{{$entity.Name.CamelCaseUF}}Row
	)
	if tx, err = helpers.TX(scope, finder.deps.DB); err != nil {
		return nil, err
	}
	if query, err = finder.SQL(fields, id); err != nil {
		return nil, err
	}
	row = New{{$entity.Name.CamelCaseUF}}Row(tx.QueryRow(query), fields)
	return row.Get()
}

func (finder {{$typeName}}) SQL(fields *entities.{{camelcaseuf $name}}Fields{{range $i, $field := $index.Fields -}}
	, {{$field.Name.CamelCaseLF}} {{template "gotype" $field.Type}}
{{- end -}}) (string, error) {
	sql := "SELECT " + strings.Join(helpers.{{$entity.Name.CamelCaseUF}}ToArray(fields), ",")
	sql += " FROM {{camelcaseuf $name}} WHERE "
{{range $i, $field := $index.Fields -}}
	sql += "{{ if ne $i 0 }} AND{{end}} {{$field.Name.Underscore}}=" +  {{template "QuotedStringFromVar" (dict "FromType" $field.Type "FromVar" $field.Name.CamelCaseLF) }}
{{- end -}}
	return sql + " LIMIT 1", nil
}

{{- end -}}
