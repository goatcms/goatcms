{{define "dao/sqlitedao/simple/{{entity}}/update_story_test.go" -}}
{{- $ctx := . -}}
{{- $entity := $ctx.DotData -}}
{{- $typeName := print $entity.Name.CamelCaseUF "Updateer" -}}

package simple

import (
	"testing"
	"database/sql"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/app/scope"
	"github.com/goatcms/goatcms/cmsapp/dao"
	"github.com/goatcms/goatcms/cmsapp/entities"
	_ "github.com/mattn/go-sqlite3"
)


func TestUpdateStory(t *testing.T) {
	t.Parallel()
	doUpdateStory(t)
}

func doUpdateStory(t *testing.T) (bool, *sql.DB) {
	var (
		ok             bool
		db             *sql.DB
		err            error
		expectedEntity *entities.{{$entityName}}
		entity         *entities.{{$entityName}}
	)
	expectedEntity = NewMockEntity2()
	if ok, db, entity = doInsertWithoutIDStory(t); !ok {
		return false, nil
	}
	{{- range $index, $field := $entity.AllFields.Ordered -}}
		{{amLinkFieldUF "entity" $field}} = {{amLinkFieldUF "expectedEntity" $field}}
	{{- end }}
	s := scope.NewScope("tag")
	updater := {{$entityName}}Update{}
	updater.deps.DB = db
	updater.deps.EngineScope = s
	if err = updater.Update(s, entity, entities.{{$entityName}}AllFields); err != nil {
		t.Error(err)
		return false, db
	}
	finder := {{$entityName}}FindByID{}
	finder.deps.DB = db
	if entity, err = finder.Find(s, entities.{{$entityName}}AllFields, *entity.ID); err != nil {
		t.Error(err)
		return false, db
	}
	{{- range $i, $field := $entity.AllFields.Ordered }}
		if *{{amLinkFieldUF "expectedEntity" $field}} != *{{amLinkFieldUF "entity" $field}} {
			t.Errorf("Returned field should contains inserted entity value for {{amLinkFieldUF "entity" $field}} field and it is %v (expeted %v)", {{amLinkFieldUF "entity" $field}}, {{amLinkFieldUF "expectedEntity" $field}})
			return false, db
		}
	{{- end }}
	return true, db
}

func TestUpdateEventTrigger(t *testing.T) {
	var (
		ok             bool
		db             *sql.DB
		err            error
		expectedEntity *entities.{{$entityName}}
		entity         *entities.{{$entityName}}
		isTrigged      = false
	)
	expectedEntity = NewMockEntity2()
	if ok, db, entity = doInsertWithoutIDStory(t); !ok {
		return
	}
	{{- range $index, $field := $entity.AllFields.Ordered -}}
		{{amLinkFieldUF "entity" $field}} = {{amLinkFieldUF "expectedEntity" $field}}
	{{- end }}
	s := scope.NewScope("tag")
	s.On(maindef.{{$entityName}}UpdateEvent, func(ientity interface{}) (err error) {
		isTrigged = true
		return
	})
	updater := {{$entityName}}Update{}
	updater.deps.DB = db
	updater.deps.EngineScope = s
	if err = updater.Update(s, entity, entities.{{$entityName}}AllFields); err != nil {
		t.Error(err)
		return
	}
	if err = s.Trigger(app.CommitEvent, nil); err != nil {
		t.Error(err)
		return
	}
	if isTrigged == false {
		t.Errorf("{{$entityName}}UpdateEvent event must be called")
		return
	}
}

{{- end -}}
