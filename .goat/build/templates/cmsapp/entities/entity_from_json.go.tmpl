{{define "entities/{{entity}}_from_json.go" -}}
{{- $ctx := . -}}
{{- $entity := $ctx.DotData -}}
{{- $fields := $entity.AllFields.Ordered -}}
{{- $hasIntField := (gt (len (index $entity.AllFields.ByType "int")) 0) -}}
{{- $hasDatetimeField := (gt (len (index $entity.AllFields.ByType "datetime")) 0) -}}

package entities

import (
	"strings"
	"strconv"
	{{- if $hasIntField}}
	  "strconv"
	{{- end }}
	{{- if $hasDatetimeField}}
	  "time"
	{{- end }}
	"github.com/goatcms/goatcore/varutil"
	"github.com/goatcms/goatcore/varutil/goaterr"
	"github.com/buger/jsonparser"
)


// InjectJSONTo{{$entity.Singular.CamelCaseUF}} decode JSON data to entity
{{template "entities/{{entity}}_from_json.go$decode_func" $entity.RootStructure}}

{{range $key, $struct := $entity.RootStructure.Structures.Ordered}}
// InjectJSONTo{{$entity.Singular.CamelCaseUF}} decode part of JSON to entity sub structure
{{template "entities/{{entity}}_from_json.go$decode_func" $struct}}
{{end}}

// New{{$entity.Singular.CamelCaseUF}}FromJSON create new {{$entity.Singular.CamelCaseUF}} instance from json
func New{{$entity.Singular.CamelCaseUF}}FromJSON(json []byte, fields {{camelcaseuf $entity.Name.CamelCaseUF}}Fields) (entity *{{camelcaseuf $entity.Name.CamelCaseUF}}, err error) {
	entity = &{{camelcaseuf $entity.Name.CamelCaseUF}}{}
	return entity, InjectJSONTo{{$entity.Singular.CamelCaseUF}}(entity, json, fields)
}

// New{{$entity.Plural.CamelCaseUF}}FromJSON create New{{$entity.Plural.CamelCaseUF}} array from JSON string
func New{{$entity.Plural.CamelCaseUF}}FromJSON(json []byte, fields {{camelcaseuf $entity.Name.CamelCaseUF}}Fields) (entities []*{{$entity.Name.CamelCaseUF}}, de error) {
	var (
		err2 error
		entity *{{$entity.Name.CamelCaseUF}}
	)
	entities = []*{{$entity.Name.CamelCaseUF}}{}
	if _, err := jsonparser.ArrayEach(json, func(value []byte, dataType jsonparser.ValueType, offset int, err error) {
		if err != nil || de != nil {
			return
		}
		if dataType != jsonparser.Object {
			de = goaterr.Errorf("NewBuild array  must contains replace objects only")
			return
		}
		if entity, err2 = New{{$entity.Name.CamelCaseUF}}FromJSON(value, fields); err2 != nil {
			de = err2
			return
		}
		entities = append(entities, entity)
	}); err != nil {
		return nil, err
	}
	if de != nil {
		return nil, de
	}
	return entities, err2
}

{{- end -}}

{{- define "entities/{{entity}}_from_json.go$decode_json" -}}

{{- end -}}


{{- define "entities/{{entity}}_from_json.go$decode_func" -}}
{{- $struct := . -}}
{{- $fields := $struct.Fields.Ordered -}}
{{- $relations := $struct.Relations.Ordered -}}
{{- $structs := $struct.Structures.Ordered -}}
{{- $structureClassName := amStructClassName $struct }}

// InjectJSONTo{{$structureClassName}} inject JSON data to entity
func InjectJSONTo{{$structureClassName}}(e *{{$structureClassName}}, json []byte, fields {{$structureClassName}}Fields) (err error) {
	return jsonparser.ObjectEach(json, func(key []byte, value []byte, dataType jsonparser.ValueType, offset int) error {
		svalue := varutil.UnescapeString(string(value))
		switch strings.ToLower(string(key)) {
{{- range $index, $field := $fields }}
				case "{{$field.Name.Lower}}":
					if !fields.{{$field.Name.CamelCaseUF}} {
						return goaterr.Errorf("entities.InjectJSONTo{{$structureClassName}} haven't got {{$field.FullName.Plain}} permissions")
					}
					{{- template "SetPointerVarFromStringVar" (dict "ToVar" (print "e." $field.Name.CamelCaseUF) "ToType" $field.Type "FromVar" "svalue")}}
{{- end -}}
{{- range $index, $relation := $relations }}
				case "{{$relation.Name.Lower}}id":
					if !fields.{{$relation.Name.CamelCaseUF}}ID {
						return goaterr.Errorf("{{$structureClassName}}.DecodeJSON haven't got {{$relation.Name.CamelCaseUF}} permissions")
					}
					{{- template "SetPointerVarFromStringVar" (dict "ToVar" (print "e." $relation.Name.CamelCaseUF "ID") "ToType" "int" "FromVar" "svalue")}}
{{- end }}
{{- range $name, $struct := $structs }}
				case "{{$struct.Name.Lower}}":
					if err = InjectJSONTo{{$structureClassName}}(&e.{{$struct.Name.CamelCaseUF}}, value, fields.{{$struct.Name.CamelCaseUF}}); err != nil {
						return err
					}
{{- end }}
		default:
			return goaterr.Errorf("{{$structureClassName}}: Unknow key %s (value: %s)", key, value)
		}
		return nil
	})
}
{{- end -}}
