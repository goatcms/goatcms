{{define "mysql.criteria.mocks_test_go" -}}
{{- $ctx := . -}}

package criteria

import (
	maindef "{{index $ctx.Properties.Build "path"}}"
	entities "{{index $ctx.Properties.Build "entities_path"}}"
)

{{- range $mi, $modelID := (keys $ctx.Data "model.") -}}
	{{- $name := (index $ctx.Data (print "model." $modelID ".entity")) -}}
	{{- $entityName := (camelcaseuf $name) -}}
	{{- $fieldsBaseKey := (print "model." $modelID ".fields.") -}}
	{{- $fields := (keys $ctx.Data $fieldsBaseKey) -}}
	{{- $relationsBaseKey := (print "model." $modelID ".relations.") -}}
	{{- $relations := (keys $ctx.Data $relationsBaseKey) }}

	func Mock{{$entityName}}Criteria(entity *entities.{{$entityName}}) *maindef.{{$entityName}}Criteria {
		return &maindef.{{$entityName}}Criteria {
			Fields: entities.{{$entityName}}AllFieldsAndID,
			Where: maindef.{{$entityName}}CriteriaWhere {
				{{- range $index, $field := $fields -}}
			    {{- $key := (print $fieldsBaseKey $field) -}}
			    {{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
			    {{- $fieldType := (lower (index $ctx.Data (print $key ".type"))) -}}

					{{ if eq $fieldType "text" "string" "email" "password" "lang" }}
					  {{$fieldName}}: &maindef.StringFieldCriteria{
							Value: []string{*entity.{{$fieldName}}},
							Type:  maindef.EQ,
						},
					{{- else if eq $fieldType "int" }}
					  {{$fieldName}}: &maindef.Int64FieldCriteria{
							Value: []int64{*entity.{{$fieldName}}},
							Type:  maindef.EQ,
						},
					{{- else -}}
					  {{- error (print "bad SQL type" .) -}}
					{{- end -}}
			  {{- end }}
			},
			Related: maindef.{{$entityName}}CriteriaRelated {
				{{- range $index, $relation := $relations -}}
					{{- $key := (print $relationsBaseKey $relation) -}}
					{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) }}
					{{- $relatedModel := (camelcaseuf (index $ctx.Data (print $key ".model"))) }}
					{{$fieldName}}: &maindef.{{$relatedModel}}Criteria {
						Fields: entities.{{$relatedModel}}AllFieldsAndID,
					},
				{{- end }}
			},
		}
	}

	func Mock{{$entityName}}Entity1() *entities.{{$entityName}} {
		var (
		{{- range $index, $field := $fields -}}
	    {{- $key := (print $fieldsBaseKey $field) -}}
		  {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
	    {{- $fieldType := (index $ctx.Data (print $key ".type")) }}
			{{lower $fieldName}} {{template "gotype" $fieldType}} = {{template "mockvalue" $fieldType}}
		{{- end }}
		{{- range $index, $relation := $relations -}}
			{{- $key := (print $relationsBaseKey $relation) -}}
			{{- $fieldName := (index $ctx.Data (print $key ".name")) }}
			{{lower $fieldName}} {{template "gotype" "int"}} = 1
		{{- end }}
		)
		return &entities.{{$entityName}} {
			{{- range $index, $field := $fields -}}
		    {{- $key := (print $fieldsBaseKey $field) -}}
		    {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
		    {{- $fieldType := (index $ctx.Data (print $key ".type")) }}
				{{camelcaseuf $fieldName}}: &{{lower $fieldName}},
		  {{- end }}
			{{- range $index, $relation := $relations -}}
				{{- $key := (print $relationsBaseKey $relation) -}}
				{{- $fieldName := (index $ctx.Data (print $key ".name")) }}
				{{camelcaseuf $fieldName}}ID: &{{lower $fieldName}},
			{{- end }}
		}
	}

	func Mock{{$entityName}}Entity2() *entities.{{$entityName}} {
		var (
		{{- range $index, $field := $fields -}}
	    {{- $key := (print $fieldsBaseKey $field) -}}
		  {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
	    {{- $fieldType := (index $ctx.Data (print $key ".type")) }}
			{{lower $fieldName}} {{template "gotype" $fieldType}} = {{template "mockvalue" $fieldType}}
		{{- end }}
		{{- range $index, $relation := $relations -}}
			{{- $key := (print $relationsBaseKey $relation) -}}
			{{- $fieldName := (index $ctx.Data (print $key ".name")) }}
			{{lower $fieldName}} {{template "gotype" "int"}} = 1
		{{- end }}
		)
		return &entities.{{$entityName}} {
			{{- range $index, $field := $fields -}}
		    {{- $key := (print $fieldsBaseKey $field) -}}
		    {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
		    {{- $fieldType := (index $ctx.Data (print $key ".type")) }}
				{{camelcaseuf $fieldName}}: &{{lower $fieldName}},
		  {{- end }}
			{{- range $index, $relation := $relations -}}
				{{- $key := (print $relationsBaseKey $relation) -}}
				{{- $fieldName := (index $ctx.Data (print $key ".name")) }}
				{{camelcaseuf $fieldName}}ID: &{{lower $fieldName}},
			{{- end }}
		}
	}
{{- end -}}

{{- end -}}
