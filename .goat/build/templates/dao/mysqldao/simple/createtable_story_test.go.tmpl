{{define "mysql.dao.createtable_story_test" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $typeName := (print $entityName "CreateTable") -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}

package simple

import (
	"testing"
	"database/sql"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/app/scope"
	helpers "{{index $ctx.Properties.Build "path"}}/mysqldao/helpers"
	maindef "{{index $ctx.Properties.Build "path"}}"
	_ "github.com/go-sql-driver/mysql"
)


func TestCreateTable(t *testing.T) {
	t.Parallel()
	doCreateTable(t, "{{$entityName}}TestCreateTable")
}

func doCreateTable(t *testing.T, dbname string) (bool, *sql.DB) {
	var (
		db  *sql.DB
		err error
	)
	if db, _ = helpers.PrepareTestDB(t, dbname); db == nil {
		return false, db
	}
	s := scope.NewScope("testtag")
	createTable := {{$entityName}}CreateTable{}
	createTable.deps.DB = db
	createTable.deps.EngineScope = s
	if err := createTable.CreateTable(s); err != nil {
		t.Error(err)
		return false, db
	}
	if err := createTable.AlterTable(s); err != nil {
		t.Error(err)
		return false, db
	}
	if _, err = helpers.Commit(s); err != nil {
		t.Error(err)
		return false, db
	}
	return true, db
}

func TestCreateTableEventTrigger(t *testing.T) {
	var (
		db        *sql.DB
		err       error
		isTrigged = false
	)
	if db, _ = helpers.PrepareTestDB(t, "{{$entityName}}TestCreateTableEventTrigger"); db == nil {
		return
	}
	s := scope.NewScope("testtag")
	s.On(maindef.{{$entityName}}CreateTableEvent, func(ientity interface{}) (err error) {
		isTrigged = true
		return
	})
	createTable := {{$entityName}}CreateTable{}
	createTable.deps.DB = db
	createTable.deps.EngineScope = s
	if err := createTable.CreateTable(s); err != nil {
		t.Error(err)
		return
	}
	if err = s.Trigger(app.CommitEvent, nil); err != nil {
		t.Error(err)
		return
	}
	if isTrigged == false {
		t.Errorf("{{$entityName}}CreateTable event must be called")
		return
	}
}

{{- end -}}
