{{- define "model_criteria" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $fields := (keys .Data $fieldsBaseKey) -}}
{{- $relationsBaseKey := (print .From ".relations.") -}}
{{- $relations := (keys .Data $relationsBaseKey) -}}

package {{index $ctx.Properties.Build "package"}}

import (
	"github.com/goatcms/goatcore/app"
	entities "{{index $ctx.Properties.Build "entities_path"}}"
)

type {{camelcaseuf $name}}CriteriaWhere struct {
	{{- range $index, $fieldID := $fields -}}
		{{- $key := (print $fieldsBaseKey $fieldID) -}}
		{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
		{{- $fieldType := (lower (index $ctx.Data (print $key ".type"))) -}}
		{{- if eq  $fieldType "text" "string" "email" "password" "lang" }}
			{{camelcaseuf $fieldName}} *StringFieldCriteria
		{{- else if eq $fieldType "int" }}
			{{camelcaseuf $fieldName}} *Int64FieldCriteria
		{{- else if eq $fieldType "datetime" }}
			{{camelcaseuf $fieldName}} *DatetimeFieldCriteria
		{{- else -}}
			{{- error (print "bad type" .) -}}
		{{- end -}}
	{{- end }}
}

type {{camelcaseuf $name}}CriteriaOrder struct {
	ID  *FieldOrder
{{- range $index, $fieldID := $fields -}}
{{- $key := (print $fieldsBaseKey $fieldID) -}}
{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
{{- $fieldType := (lower (index $ctx.Data (print $key ".type"))) -}}

{{- if eq  $fieldType "text" "string" "email" "password" "lang" }}
	{{camelcaseuf $fieldName}} *FieldOrder
{{- else if eq $fieldType "int" }}
	{{camelcaseuf $fieldName}} *FieldOrder
{{- else if eq $fieldType "datetime" }}
	{{camelcaseuf $fieldName}} *FieldOrder
{{- else -}}
	{{- error (print "bad type" .) -}}
{{- end -}}

{{- end }}

{{- range $index, $relationID := $relations -}}
{{- $key := (print $relationsBaseKey $relationID) -}}
{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
{{- $relatedModel := (camelcaseuf (index $ctx.Data (print $key ".model"))) }}
	{{$fieldName}}ID *FieldOrder
{{- end }}
}

type {{camelcaseuf $name}}CriteriaRelated struct {
	{{- range $index, $relationID := $relations -}}
		{{- $key := (print $relationsBaseKey $relationID) -}}
		{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
		{{- $relatedModel := (camelcaseuf (index $ctx.Data (print $key ".model"))) }}
		{{$fieldName}} *{{$relatedModel}}Criteria
	{{- end }}
}

type {{camelcaseuf $name}}Criteria struct {
  Fields  *entities.{{camelcaseuf $name}}Fields
  Where   {{camelcaseuf $name}}CriteriaWhere
	Related {{camelcaseuf $name}}CriteriaRelated
	Order   {{camelcaseuf $name}}CriteriaOrder
}

type {{camelcaseuf $name}}CriteriaSearch interface {
  Find(scope app.Scope, criteria *{{camelcaseuf $name}}Criteria, pager *Pager) (rows {{camelcaseuf $name}}Rows, err error)
}

type {{camelcaseuf $name}}CriteriaDeleter interface {
  Delete(scope app.Scope, criteria *{{camelcaseuf $name}}Criteria) (err error)
}

type {{camelcaseuf $name}}CriteriaCounter interface {
  Count(scope app.Scope, criteria *{{camelcaseuf $name}}Criteria) (count int64, err error)
}

{{- end -}}
