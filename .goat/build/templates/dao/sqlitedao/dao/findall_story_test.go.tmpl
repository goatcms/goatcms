{{define "sqlite.dao.findall_story_test" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}

package dao

import (
	"testing"
	"github.com/jmoiron/sqlx"
	"github.com/goatcms/goatcore/app/scope"
	entities "{{index $ctx.Properties.Build "entities_path"}}"
	maindef "{{index $ctx.Properties.Build "path"}}"
	_ "github.com/mattn/go-sqlite3"
)


func TestFindAllStory(t *testing.T) {
	t.Parallel()
	doFindAllStory(t)
}

func doFindAllStory(t *testing.T) (bool, *sqlx.DB) {
	var (
		rows     maindef.Rows
		ok       bool
		db       *sqlx.DB
		err      error
	)
	if ok, db, _ = doInsertStory(t); !ok {
		return false, nil
	}
	s := scope.NewScope("tag")
	finder := {{$entityName}}FindAll{}
	finder.deps.DB = db
	if rows, err = finder.Find(s, entities.{{$entityName}}MainFields); err != nil {
		t.Error(err)
		return false, db
	}
	// expected list witn exaclly one row
	// TODO: check this

	// iterate over each row
	count := 0
	expectedEntity := NewMockEntity1()
	for rows.Next() {
		var e entities.{{$entityName}}
		count++
		if err = rows.StructScan(&e); err != nil {
			t.Error(err)
			return false, db
		}
		{{- range $index, $field := (keys .Data $fieldsBaseKey) -}}
		  {{- $key := (print $fieldsBaseKey $field) -}}
		  {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
			{{- print "\n" -}}
			if expectedEntity.{{camelcaseuf $fieldName}} != e.{{camelcaseuf $fieldName}} {
				t.Errorf("Returned field should contains inserted entity value for {{camelcaseuf $fieldName}} field and it is %v (expeted %v)",e.{{camelcaseuf $fieldName}}, expectedEntity.{{camelcaseuf $fieldName}})
				return false, db
			}
		{{- end -}}
	}
	if count != 1 {
		t.Errorf("FindAll should return one result and it return %v results", count)
		return false, db
	}
	return true, db
}

{{- end -}}
