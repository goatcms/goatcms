{{define "sqlite.dao.findbyid_story_test" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}

package dao

import (
	"testing"
	"github.com/jmoiron/sqlx"
	"github.com/goatcms/goatcore/app/scope"
	entities "{{index $ctx.Properties.Build "entities_path"}}"
	maindef "{{index $ctx.Properties.Build "path"}}"
	_ "github.com/mattn/go-sqlite3"
)


func TestFindByIDStory(t *testing.T) {
	t.Parallel()
	doFindByIDStory(t)
}

func doFindByIDStory(t *testing.T) (bool, *sqlx.DB) {
	var (
		row            maindef.Row
		ok             bool
		db             *sqlx.DB
		err            error
		expectedEntity *entities.{{$entityName}}
		entity         *entities.{{$entityName}}
	)
	if ok, db, expectedEntity = doInsertStory(t); !ok {
		return false, nil
	}
	s := scope.NewScope("tag")
	finder := {{$entityName}}FindByID{}
	finder.deps.DB = db
	if row, err = finder.Find(s, entities.{{$entityName}}MainFields, expectedEntity.ID); err != nil {
		t.Error(err)
		return false, db
	}
	// iterate over each row
	entity = &entities.{{$entityName}}{}
	if err = row.StructScan(entity); err != nil {
		t.Error(err)
		return false, db
	}
	{{- range $index, $field := (keys .Data $fieldsBaseKey) -}}
	  {{- $key := (print $fieldsBaseKey $field) -}}
	  {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
		{{- print "\n" -}}
		if expectedEntity.{{camelcaseuf $fieldName}} != entity.{{camelcaseuf $fieldName}} {
			t.Errorf("Returned field should contains inserted entity value for {{camelcaseuf $fieldName}} field and it is %v (expeted %v)", entity.{{camelcaseuf $fieldName}}, expectedEntity.{{camelcaseuf $fieldName}})
			return false, db
		}
	{{- end }}
	return true, db
}

{{- end -}}
