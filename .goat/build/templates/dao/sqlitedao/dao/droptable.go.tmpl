{{define "dao.droptable" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $typeName := (print $entityName "DropTable") -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}

package {{lower $name}}dao

import (
	"github.com/goatcms/goatcore/app"
	sqlitebase "{{index $ctx.Properties.Build "path"}}"
	maindef "{{index $ctx.Properties.Build "interfaces_path"}}"
)

// {{$typeName}} is a Data Access Object for {{lower $name}} entity
type {{$typeName}} struct {
  deps struct{
    DB *sql.DB `dependency:"sqlitedb"`
  }
}

func New{{$typeName}}(di dependency.Injector) (*{{$typeName}}, error) {
  instance := &{{$typeName}}{}
  if err := di.InjectTo(&instance.deps); err != nil {
    return nil, err
  }
  return instance, nil
}

func {{$typeName}}Factory(dp dependency.Provider) (interface{}, error) {
	instance, err := New{{$typeName}}(dp)
	if err != nil {
		return nil, err
	}
	return maindef.DropTable(instance), nil
}

func (dao {{$typeName}}) DropTable(scope app.Scope) error {
	var (
		err   error
		tx *sql.Tx
	)
	if tx, err = sqlitebase.TX(scope, dao.deps.DB); err != nil {
		return err
	}
	tx.MustExec(dao.SQL())
	return nil
}

func (dao {{$typeName}}) SQL() string {
  return `DROP TABLE IF EXISTS {{camelcaseuf $name}} `
}

{{- end -}}
