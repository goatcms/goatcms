{{define "dao.findall" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $typeName := (print $entityName "FindAll") -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}

package {{lower $name}}dao

import (
	"github.com/goatcms/goatcore/app"
	sqlitebase "{{index $ctx.Properties.Build "path"}}"
	maindef "{{index $ctx.Properties.Build "interfaces_path"}}"
)

// {{$typeName}} is a Data Access Object for {{lower $name}} entity
type {{$typeName}} struct {
  deps struct{
    DB *sql.DB `dependency:"sqlitedb"`
  }
}

func New{{$typeName}}(di dependency.Injector) (*{{$typeName}}, error) {
  instance := &{{$typeName}}{}
  if err := di.InjectTo(&instance.deps); err != nil {
    return nil, err
  }
  return instance, nil
}

func {{$typeName}}Factory(dp dependency.Provider) (interface{}, error) {
	instance, err := New{{$typeName}}(dp)
	if err != nil {
		return nil, err
	}
	return maindef.FindAll(instance), nil
}

func (dao {{$typeName}}) Find(scope app.Scope, fields []string) (rows maindef.Rows, err error) {
	var (
		sql string
		tx  *sql.Tx
	)
	if tx, err = sqlitebase.TX(scope, dao.deps.DB); err != nil {
		return err
	}
	if sql, err = dao.SQL(fields); err != nil {
		return nil, err
	}
	if rows, err = tx.Queryx(sql); err != nil {
		return nil, fmt.Errorf("%s: %s", err.Error(), q.query)
	}
	return rows.(maindef.Rows), nil
}

func (dao {{$typeName}}) SQL(fields []string) (string, error) {
	sql := "SELECT "
	i := 0
	for _, row := range fields {
		if i > 0 {
			sql += ", "
		}
		sql += row
		i++
	}
	return sql + " FROM {{camelcaseuf $name}}", nil
}

{{- end -}}
