{{define "sqlite.dao.main_test" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $fields := (keys $ctx.Data $fieldsBaseKey) -}}
{{- $relationsBaseKey := (print .From ".relations.") -}}
{{- $relations := (keys $ctx.Data $relationsBaseKey) -}}
{{- $firstDatetimeField := (findRow $fieldsBaseKey "^[A-Za-z0-9]+$" ".type" "datetime" $ctx.Data) -}}

package simple

import (
	{{- if ne $firstDatetimeField ""}}
	"time"
	{{- end }}
	entities "{{index $ctx.Properties.Build "entities_path"}}"
)

func NewMockEntity1() *entities.{{$entityName}} {
	var (
	{{- range $index, $field := $fields -}}
    {{- $key := (print $fieldsBaseKey $field) -}}
	  {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
    {{- $fieldType := (index $ctx.Data (print $key ".type")) }}
		{{- if eq $fieldType "datetime" }}
		{{lower $fieldName}}, _ = time.Parse(time.RFC3339, {{template "mockvalue" $fieldType}})
		{{- else }}
		{{lower $fieldName}} {{template "gotype" $fieldType}} = {{template "mockvalue" $fieldType}}
		{{- end }}
	{{- end }}
	{{- range $index, $relation := $relations -}}
		{{- $key := (print $relationsBaseKey $relation) -}}
		{{- $fieldName := (index $ctx.Data (print $key ".name")) }}
		{{lower $fieldName}} {{template "gotype" "int"}} = 1
	{{- end }}
	)
	return &entities.{{$entityName}} {
		{{- range $index, $field := $fields -}}
	    {{- $key := (print $fieldsBaseKey $field) -}}
	    {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
	    {{- $fieldType := (index $ctx.Data (print $key ".type")) }}
			{{camelcaseuf $fieldName}}: &{{lower $fieldName}},
	  {{- end }}
		{{- range $index, $relation := $relations -}}
			{{- $key := (print $relationsBaseKey $relation) -}}
			{{- $fieldName := (index $ctx.Data (print $key ".name")) }}
			{{camelcaseuf $fieldName}}ID: &{{lower $fieldName}},
		{{- end }}
	}
}

func NewMockEntity2() *entities.{{$entityName}} {
	var (
	{{- range $index, $field := $fields -}}
    {{- $key := (print $fieldsBaseKey $field) -}}
	  {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
    {{- $fieldType := (index $ctx.Data (print $key ".type")) }}
		{{- if eq $fieldType "datetime" }}
		{{lower $fieldName}}, _ = time.Parse(time.RFC3339, {{template "mockvalue" $fieldType}})
		{{- else }}
		{{lower $fieldName}} {{template "gotype" $fieldType}} = {{template "mockvalue" $fieldType}}
		{{- end }}
	{{- end }}
	{{- range $index, $relation := $relations -}}
		{{- $key := (print $relationsBaseKey $relation) -}}
		{{- $fieldName := (index $ctx.Data (print $key ".name")) }}
		{{lower $fieldName}} {{template "gotype" "int"}} = 1
	{{- end }}
	)
	return &entities.{{$entityName}} {
		{{- range $index, $field := $fields -}}
	    {{- $key := (print $fieldsBaseKey $field) -}}
	    {{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
	    {{- $fieldType := (index $ctx.Data (print $key ".type")) }}
			{{camelcaseuf $fieldName}}: &{{lower $fieldName}},
	  {{- end }}
		{{- range $index, $relation := $relations -}}
			{{- $key := (print $relationsBaseKey $relation) -}}
			{{- $fieldName := (index $ctx.Data (print $key ".name")) }}
			{{camelcaseuf $fieldName}}ID: &{{lower $fieldName}},
		{{- end }}
	}
}

{{- end -}}
