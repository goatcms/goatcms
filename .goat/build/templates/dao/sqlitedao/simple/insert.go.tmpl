{{define "sqlite.dao.insert" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $typeName := (print $entityName "Insert") -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $fields := (keys $ctx.Data $fieldsBaseKey) -}}
{{- $relationsBaseKey := (print .From ".relations.") -}}
{{- $relations := (keys $ctx.Data $relationsBaseKey) -}}

package simple

import (
	"database/sql"
	"fmt"
	"strconv"

	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/dependency"
	helpers "{{index $ctx.Properties.Build "path"}}/sqlitedao/helpers"
	maindef "{{index $ctx.Properties.Build "path"}}"
	entities "{{index $ctx.Properties.Build "entities_path"}}"
)

// {{$typeName}} is a Data Access Object for {{lower $name}} entity
type {{$typeName}} struct {
  deps struct{
    DB          *sql.DB   `dependency:"db0.engine"`
		EngineScope app.Scope `dependency:"EngineScope"`
  }
}

func New{{$typeName}}(di dependency.Injector) (*{{$typeName}}, error) {
  instance := &{{$typeName}}{}
  if err := di.InjectTo(&instance.deps); err != nil {
    return nil, err
  }
  return instance, nil
}

func {{$typeName}}Factory(dp dependency.Provider) (interface{}, error) {
	instance, err := New{{$typeName}}(dp)
	if err != nil {
		return nil, err
	}
	return maindef.{{$entityName}}Insert(instance), nil
}

func (dao {{$typeName}}) Insert(scope app.Scope, entity *entities.{{$entityName}}) (id int64, err error) {
	var (
		sqlq   string
		tx     *sql.Tx
		result sql.Result
	)
	if tx, err = helpers.TX(scope, dao.deps.DB); err != nil {
		return -1, err
	}
	if sqlq, err = dao.SQL(entity); err != nil {
		return -1, err
	}
	if result, err = tx.Exec(sqlq); err != nil {
		return -1, fmt.Errorf("%s: %s", err.Error(), sqlq)
	}
	if id, err = result.LastInsertId(); err != nil {
		return -1, fmt.Errorf("%s: %s", err.Error(), sqlq)
	}
	entity.ID = &id
	if err = dao.deps.EngineScope.Trigger(maindef.{{$typeName}}Event, nil); err != nil {
		return 0, err
	}
	scope.On(app.AfterCommitEvent, func(interface{}) (err error) {
		return dao.deps.EngineScope.Trigger(maindef.{{$typeName}}Event, entity)
	})
	return id, nil
}

func (dao {{$typeName}}) SQL(entity *entities.{{$entityName}}) (string, error) {
	sql := "INSERT INTO {{camelcaseuf $name}} ("
	if entity.ID != nil {
		sql += "ID, "
	}
	sql += "{{- range $fi, $field := $fields -}}
			{{- $key := (print $fieldsBaseKey $field) -}}
			{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
			{{- $fieldType := (index $ctx.Data (print $key ".type")) }}
			{{- if ne $fi 0 -}}, {{ end -}}
			{{$fieldName}}
		{{- end -}}
		{{- if and (ne (len $fields) 0) (ne (len $relations) 0) }}, {{ end -}}
		{{- range $fi, $relation := $relations -}}
			{{- $key := (print $relationsBaseKey $relation) -}}
			{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
			{{- if ne $fi 0 -}}, {{ end -}}
			{{$fieldName}}ID
		{{- end -}}) VALUES ("
	if entity.ID != nil {
		sql += strconv.FormatInt(*entity.ID, 10) + ", "
	}
	sql +=	"{{- range $fi, $field := $fields -}}
			{{- $key := (print $fieldsBaseKey $field) -}}
			{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
			{{- $fieldType := (index $ctx.Data (print $key ".type")) }}
			{{- if ne $fi 0 -}}, {{ end -}}
			{{- if eq (lower $fieldType) "text" "string" "email" "password" "lang" -}}
				" + helpers.Quote(entity.{{$fieldName}}) + "
			{{- else if eq (lower $fieldType) "datetime" -}}
				" + helpers.FormatDatetime(entity.{{$fieldName}}) + "
			{{- else if eq (lower $fieldType) "int" -}}
				" + helpers.FormatInt(entity.{{$fieldName}}, 10) + "
			{{- else -}}
				{{- error (print "bad type" $fieldType) -}}
			{{- end -}}
		{{- end -}}
		{{- if and (ne (len $fields) 0) (ne (len $relations) 0) }}, {{ end -}}
		{{- range $fi, $relation := $relations -}}
			{{- $key := (print $relationsBaseKey $relation) -}}
			{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
			{{- if ne $fi 0 -}}, {{ end -}}
			" + helpers.FormatInt(entity.{{$fieldName}}ID, 10) + "
		{{- end -}})"
		return sql, nil
}

{{- end -}}
