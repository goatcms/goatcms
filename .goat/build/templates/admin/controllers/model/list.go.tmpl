{{- define "admin.controllers.model.list" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $typeName := (print $entityName "CreateTable") -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $requiredRolesStr := (index $ctx.Data (print .From ".admin_read_roles")) -}}
{{- $requiredRoles := (unique (split $requiredRolesStr " ")) -}}

package {{lower $name}}

import (
	"fmt"
	"html/template"
	"net/http"

	"github.com/goatcms/goatcms/cmsapp/dao"
	"github.com/goatcms/goatcms/cmsapp/entities"
	"github.com/goatcms/goatcms/cmsapp/services"
	"github.com/goatcms/goatcms/cmsapp/services/requestdep"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/dependency"
	"github.com/goatcms/goatcore/goathtml"
)

var (
	listRequiredRoles = []string{
		{{- range $i, $role := $requiredRoles -}}
		{{- if ne $i 0 }}, {{ end -}}
		"{{$role}}"
		{{- end -}}
	}
)

// List is a controler to show a list of article
type List struct {
	deps struct {
		Template services.Template 					`dependency:"TemplateService"`
		Logger   services.Logger            `dependency:"LoggerService"`
		Finder   dao.{{$entityName}}Search  `dependency:"{{$entityName}}Search"`
	}
	view *template.Template
}

// NewList create instance of a list {{lower $name}} controller
func NewList(dp dependency.Provider) (*List, error) {
	var err error
	ctrl := &List{}
	if err = dp.InjectTo(&ctrl.deps); err != nil {
		return nil, err
	}
	if ctrl.view, err = ctrl.deps.Template.View(goathtml.DefaultLayout, "admin/model/{{lower $name}}/list", nil); err != nil {
		return nil, err
	}
	return ctrl, nil
}

// Get is handler to serve template where one can add new article
func (c *List) Get(requestScope app.Scope) (err error) {
	var (
		rows        dao.{{$entityName}}Rows
		entity      *entities.{{$entityName}}
		deps struct {
			ACL          requestdep.ACL       `request:"ACLService"`
			RequestError requestdep.Error     `request:"ErrorService"`
			Responser    requestdep.Responser `request:"ResponserService"`
			Request      *http.Request        `request:"Request"`
		}
		searchParams dao.{{$entityName}}SearchParams
	)
	if err = requestScope.InjectTo(&deps); err != nil {
		return err
	}
	if !deps.ACL.HasAnyRole(listRequiredRoles) {
		c.deps.Logger.ErrorLog("Access denied")
		deps.RequestError.Error(403, fmt.Errorf("Access denied 403"))
		return
	}
	if rows, err = c.deps.Finder.Search(requestScope, entities.{{$entityName}}MainFieldsAndID, &searchParams); err != nil {
		deps.RequestError.Error(312, err)
		return
	}
	collection := []*entities.{{$entityName}}{}
	for rows.Next() {
		if entity, err = rows.Get(); err != nil {
			deps.RequestError.Error(312, err)
			return
		}
		collection = append(collection, entity)
	}
	requestScope.On(app.ErrorEvent, func(erri interface{}) error {
		scopeErr := erri.(error)
		deps.RequestError.Errorf(403, "%s", scopeErr.Error())
		return nil
	})
	if err = deps.Responser.Execute(c.view, map[string]interface{}{
		"Collection": collection,
		"Labels":     entities.{{$entityName}}MainFields,
	}); err != nil {
		deps.RequestError.Error(312, err)
		return
	}
	return nil
}

{{- end -}}
