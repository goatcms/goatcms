{{- define "mysql.database_test" -}}
{{- $ctx := . -}}

package database

import (
	"bytes"
	"database/sql"
	"strings"
	"testing"

	helpers "{{index $ctx.Properties.Build "path"}}/mysqldao/helpers"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/app/gio"
	"github.com/goatcms/goatcore/app/mockupapp"
	"github.com/goatcms/goatcore/app/scope"
	maindef "{{index $ctx.Properties.Build "path"}}"
)

func TestFactory(t *testing.T) {
	var (
		err      error
		db       *sql.DB
		mysqlURL string
		mapp     app.App
	)
	t.Parallel()
	// prepare mockup application
	if db, mysqlURL = helpers.PrepareTestDB(t, "DatabaseTestFactoryTest"); db == nil {
		t.Error(err)
		return
	}
	db.Close()
	configScope := scope.NewScope(app.ConfigTagName)
	configScope.Set("database.url", mysqlURL)
	if mapp, err = mockupapp.NewApp(mockupapp.MockupOptions{
		Input:       gio.NewInput(strings.NewReader("")),
		Output:      gio.NewOutput(new(bytes.Buffer)),
		ConfigScope: configScope,
	}); err != nil {
		t.Error(err)
		return
	}
	if err = mapp.DependencyProvider().AddDefaultFactory("db0.engine", EngineFactory); err != nil {
		t.Error(err)
		return
	}
	if err = mapp.DependencyProvider().AddDefaultFactory("db0", Factory); err != nil {
		t.Error(err)
		return
	}
	// test
	var deps struct {
		DB maindef.Database `dependency:"db0"`
	}
	if err = mapp.DependencyProvider().InjectTo(&deps); err != nil {
		t.Error(err)
		return
	}
	if deps.DB == nil {
		t.Error("should inject database instance to DB property (during injection)")
		return
	}
}

{{- end -}}
