{{define "sqlite.dao.update" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $typeName := (print $entityName "Update") -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $fields := (keys .Data $fieldsBaseKey) -}}
{{- $relationsBaseKey := (print .From ".relations.") -}}
{{- $relations := (keys .Data $relationsBaseKey) -}}

package simple

import (
	"fmt"
	"strconv"
	"strings"
	"database/sql"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/dependency"
	helpers "{{index $ctx.Properties.Build "path"}}/sqlitedao/helpers"
	maindef "{{index $ctx.Properties.Build "path"}}"
	entities "{{index $ctx.Properties.Build "entities_path"}}"
)


// {{$typeName}} is a Data Access Object for {{lower $name}} entity
type {{$typeName}} struct {
  deps struct{
    DB *sql.DB            `dependency:"db0.engine"`
	  EngineScope app.Scope `dependency:"EngineScope"`
  }
}

func New{{$typeName}}(di dependency.Injector) (*{{$typeName}}, error) {
  instance := &{{$typeName}}{}
  if err := di.InjectTo(&instance.deps); err != nil {
    return nil, err
  }
  return instance, nil
}

func {{$typeName}}Factory(dp dependency.Provider) (interface{}, error) {
	instance, err := New{{$typeName}}(dp)
	if err != nil {
		return nil, err
	}
	return maindef.{{$entityName}}Update(instance), nil
}

func (dao {{$typeName}}) Update(scope app.Scope, entity *entities.{{$entityName}}, fields *entities.{{camelcaseuf $name}}Fields) (err error) {
	var (
		res   sql.Result
		count int64
		query string
		tx  *sql.Tx
	)
	if tx, err = helpers.TX(scope, dao.deps.DB); err != nil {
		return err
	}
	if query, err = dao.SQL(fields, entity); err != nil {
		return fmt.Errorf("%s: %s", err.Error(), query)
	}
	if res, err = tx.Exec(query); err != nil {
		return fmt.Errorf("%s: %s", err.Error(), query)
	}
	if count, err = res.RowsAffected(); err != nil {
		return fmt.Errorf("%s: %s", err.Error(), query)
	}
	if count != 1 {
		return fmt.Errorf("Update modified more then one record (%v records modyfieds): %s", count, query)
	}
	if err = dao.deps.EngineScope.Trigger(maindef.{{$entityName}}UpdateEvent, entity); err != nil {
		return err
	}
	scope.On(app.AfterCommitEvent, func(interface{}) (err error) {
		return dao.deps.EngineScope.Trigger(maindef.{{$entityName}}UpdateEvent, entity)
	})
	return nil
}

func (dao {{$typeName}}) SQL(fields *entities.{{camelcaseuf $name}}Fields, entity *entities.{{$entityName}}) (string, error) {
	array := make([]string, {{sum (len $fields) (len $relations)}})
	sql := "UPDATE {{camelcaseuf $name}} SET "
	i := 0
{{- range $fi, $field := $fields -}}
{{- $key := (print $fieldsBaseKey $field) -}}
{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) -}}
{{- $fieldType := (index $ctx.Data (print $key ".type")) }}
	if fields.{{$fieldName}} {
{{- if eq (lower $fieldType) "text" "string" "email" "password" "lang" }}
	  array[i] = "{{$fieldName}}=" + helpers.Quote(entity.{{$fieldName}})
{{- else if eq (lower $fieldType) "datetime" }}
		array[i] = "{{$fieldName}}=" + helpers.FormatDatetime(entity.{{$fieldName}})
{{- else if eq (lower $fieldType) "int" }}
		array[i] = "{{$fieldName}}=" + helpers.FormatInt(entity.{{$fieldName}}, 10)
{{- else -}}
		{{- error (print "bad type" $fieldType) -}}
{{- end }}
		i++
	}
{{- end -}}
{{- range $fi, $relation := $relations -}}
{{- $key := (print $relationsBaseKey $relation) -}}
{{- $fieldName := (camelcaseuf (index $ctx.Data (print $key ".name"))) }}
	if fields.{{$fieldName}}ID {
		array[i] = "{{$fieldName}}ID=" + helpers.FormatInt(entity.{{$fieldName}}ID, 10)
		i++
	}
{{- end }}
	sql += strings.Join(array[0:i], ", ") + " WHERE ID=" + strconv.FormatInt(*entity.ID, 10)
	return sql, nil
}

{{- end -}}
