{{- define "admin.controllers.model.inserter" -}}
{{- $ctx := . -}}
{{- $name := (index $ctx.Data (print .From ".entity")) -}}
{{- $entityName := (camelcaseuf $name) -}}
{{- $typeName := (print $entityName "CreateTable") -}}
{{- $fieldsBaseKey := (print .From ".fields.") -}}
{{- $requiredRolesStr := (index $ctx.Data (print .From ".admin_insert_roles")) -}}
{{- $requiredRoles := (unique (split $requiredRolesStr " ")) -}}

package {{lower $name}}

import (
	"html/template"

	entities "{{index $ctx.Properties.Build "entities_path"}}"
	httpmodel "github.com/goatcms/goatcms/cmsapp/http/httpmodel/{{lower $name}}"
	"github.com/goatcms/goatcms/cmsapp/services"
	"github.com/goatcms/goatcms/cmsapp/dao"
	"github.com/goatcms/goatcms/cmsapp/services/requestdep"
	"github.com/goatcms/goatcms/cmsapp/cmserror"
	"github.com/goatcms/goatcore/app"
	"github.com/goatcms/goatcore/dependency"
	"github.com/goatcms/goatcore/goathtml"
	"github.com/goatcms/goatcore/messages"
	"github.com/goatcms/goatcore/messages/msgcollection"
)

var (
	insertRequiredRoles = []string{
		{{- range $i, $role := $requiredRoles -}}
		{{- if ne $i 0 }}, {{ end -}}
		"{{$role}}"
		{{- end -}}
	}
)

// Inserter is {{lower $name}} insert controller
type Inserter struct {
	deps struct {
		Template services.Template     `dependency:"TemplateService"`
		Logger   services.Logger       `dependency:"LoggerService"`
		Inserter dao.{{$entityName}}Insert            `dependency:"{{$entityName}}Insert"`
	}
	view *template.Template
}

// NewInserter create instance of a Inserter form controller
func NewInserter(dp dependency.Provider) (*Inserter, error) {
	var err error
	ctrl := &Inserter{}
	if err = dp.InjectTo(&ctrl.deps); err != nil {
		return nil, err
	}
	if ctrl.view, err = ctrl.deps.Template.View(goathtml.DefaultLayout, "admin/model/{{lower $name}}/insert", nil); err != nil {
		return nil, err
	}
	return ctrl, nil
}

// Get is handler to serve template where one can add new article
func (c *Inserter) Get(scope app.Scope) (err error) {
	var deps struct {
		ACL          requestdep.ACL       `request:"ACLService"`
		RequestError requestdep.Error     `request:"ErrorService"`
		Responser    requestdep.Responser `request:"ResponserService"`
	}
	if err = scope.InjectTo(&deps); err != nil {
		return err
	}
	if !deps.ACL.HasAnyRole(insertRequiredRoles) {
		return cmserror.NewAccessDenideError(nil)
	}
	if err = deps.Responser.Execute(c.view, map[string]interface{}{
		"Valid": msgcollection.NewMessageMap(),
		"Entity":  map[string]interface{}{},
		"Fields": entities.{{$entityName}}MainFields,
	}); err != nil {
		return err
	}
	return nil
}

// Post post is {{lower $entityName}} insert endpoint for HTTP post method
func (c *Inserter) Post(scope app.Scope) (err error) {
	var (
		msgs messages.MessageMap
		entity *entities.{{$entityName}}
		deps struct {
			ACL          requestdep.ACL       `request:"ACLService"`
			RequestError requestdep.Error     `request:"ErrorService"`
			Responser    requestdep.Responser `request:"ResponserService"`
		}
	)
	if err = scope.InjectTo(&deps); err != nil {
		return err
	}
	if !deps.ACL.HasAnyRole(insertRequiredRoles) {
		return cmserror.NewAccessDenideError(nil)
	}
	if entity, err = httpmodel.NewForm(scope, entities.{{$entityName}}MainFields); err != nil {
		return err
	}
	if msgs, err = entities.Valid{{$entityName}}(entity, entities.{{$entityName}}MainFields); err != nil {
		return err
	}
	if len(msgs.GetAll()) == 0 {
		if _, err = c.deps.Inserter.Insert(scope, entity); err != nil {
			return err
		}
		if err = scope.Trigger(app.CommitEvent, nil); err != nil {
			return err
		}
		deps.Responser.Redirect("/admin/{{lower $name}}")
		return nil
	}
	if err := deps.Responser.Execute(c.view, map[string]interface{}{
		"Valid": msgs,
		"Entity": entity,
		"Fields": entities.{{$entityName}}MainFields,
	}); err != nil {
		return err
	}
	return nil
}

{{- end -}}
