{{define "module.module_go" -}}
{{- $ctx := . -}}

package {{index $ctx.Properties.Build "package"}}

import (
	"fmt"
	"strings"

	"github.com/goatcms/goatcms/cmsapp/dao/mysqldao"
	"github.com/goatcms/goatcms/cmsapp/dao/sqlitedao"
	"github.com/goatcms/goatcore/app"
)

// Module is cmsapp module
// It contains all controller, services, ...
type Module struct{}

// NewModule create new module instance
func NewModule() app.Module {
	return &Module{}
}

// RegisterDependencies is init callback to register module dependencies
func (m *Module) RegisterDependencies(a app.App) (err error) {
	if err = RegisterFilesystems(a); err != nil {
		return err
	}
	if err = RegisterCommands(a); err != nil {
		return err
	}
	if err = RegisterServices(a); err != nil {
		return err
	}
	return m.RegisterDAO(a)
}

// RegisterDAO is init callback to register module DAO (Data Access Object) dependencies
func (m *Module) RegisterDAO(a app.App) (err error) {
	var (
		databaseTypeI interface{}
	)
	dp := a.DependencyProvider()
	if databaseTypeI, err = a.ConfigScope().Get("database.engine"); err != nil {
		return sqlitedao.RegisterDependencies(dp)
	}
	switch strings.ToLower(databaseTypeI.(string)) {
	case "":
		return sqlitedao.RegisterDependencies(dp)
	case "sqlite", "sqlite3":
		return sqlitedao.RegisterDependencies(dp)
	case "mysql":
		return mysqldao.RegisterDependencies(dp)
	}
	return fmt.Errorf("Unknown database type %v", databaseTypeI)
}

// InitDependencies is init callback to inject dependencies inside modules
func (m *Module) InitDependencies(a app.App) (err error) {
	if err = InitServices(a); err != nil {
		return err
	}
	if err = InitControllers(a); err != nil {
		return err
	}
	if err = InitRouter(a); err != nil {
		return err
	}
	return nil
}

// Run is run event callback
func (m *Module) Run(a app.App) error {
	return nil
}

{{- end -}}
