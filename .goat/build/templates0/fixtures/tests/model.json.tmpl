{{define "fixtures.tests.model_json" -}}
{{- $ctx := . -}}
{{- $entityName := (index $ctx.Data (print $ctx.From ".entity")) -}}
{{- $fieldsBaseKey := (print $ctx.From ".fields.") -}}
{{- $fields := (keys $ctx.Data $fieldsBaseKey) -}}
{{- $relationsBaseKey := (print $ctx.From ".relations.") -}}
{{- $relations := (keys $ctx.Data $relationsBaseKey) -}}

{{- $N := 100 -}}

[
{{- range $i, $_ := (repeatNTimes $N) -}}
		{{- if ne $i 0 -}}, {{- end }}
		{"ID": {{ sum $i 1 -}}
{{- range $i, $fieldID := $fields -}}
{{- $key := (print $fieldsBaseKey $fieldID) -}}
{{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
{{- $fieldType := (index $ctx.Data (print $key ".type")) -}}
		, "{{camelcaseuf $fieldName}}": {{template "mockvalue" $fieldType}}
{{- end }}

{{- if and (ne (len $fields) 0) (ne (len $relations) 0) -}}, {{- end -}}

{{- range $i, $relation := $relations -}}
{{- $key := (print $relationsBaseKey $relation) -}}
{{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
{{- $fieldName := (index $ctx.Data (print $key ".name")) -}}
{{- $isRequired := (index $ctx.Data (print $key ".required")) -}}
		{{- if ne $i 0 -}}, {{- end -}}
		{{- if eq $isRequired "y" -}}
		"{{camelcaseuf $fieldName}}ID": {{ sum (randIntn $N) 1 }}
		{{- else -}}
		"{{camelcaseuf $fieldName}}ID": null
		{{- end -}}
{{- end -}}
}
{{- end }}
]

{{- end -}}
